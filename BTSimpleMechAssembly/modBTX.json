{
  "Name": "BTSimpleMechAssembly",
  "Enabled": true,

  "Version": "1.2.3.0",
  "Description": "",
  "Author": "mcb",
  "Website": "https://github.com/mcb5637/BTSimpleMechAssembly",

  "DLL": "BTSimpleMechAssembly.dll",

  "ConflictsWith": [ "AdjustedMechAssembly", "AdjustedMechAssemblyCC", "AdjustedMechSalvage", "CustomSalvage", "SalvageOperations" ],

  /*
  use chassis tags to further define crossassembly: "chassis_ExcludeCrossAssembly" to exclude it,
  or "chassis_CrossAssemblyAllowedWith_X" where X is a VariantName or UIName to allow 2 specific mechs to crossassemble (technically only required in one of the mechs, but best put it into both to make it clear from viewing the chassisdefs).
  use mech tags to further define salvage: "mech_MechPartSalvageRedirect_X" where X is a mechdef id,
  creates mechpart salvage of that mech (ignoring original mech blackisted status, but not the new mechs blacklisted status),
  does not change MechComponents (weapons/heatsinks...), these are generated from their old mech.
  */
  "Settings": {
    /*set to null for no upgrade required*/
    "CrossAssemblyUpgradeRequired": "argoUpgrade_mechBay_machineShop",
    /*BEX simulation difficulty compatibility*/
    "BTXCrossAssemblyAlwaysAllowIfSimulation": true,
    /*defines which mech statistics have to match*/
    "CrossAssemblySpeedMatch": true,
    "CrossAssemblyTonnsMatch": true,
    "CrossAssemblyTagsMatch": [ "chassis_endo", "chassis_ferro", "chassis_DHS" ],
    "CrossAssemblyInventoryMatch": [ "Gear_XL_Engine", "Gear_XL_Engine_Clan", "Gear_XL_Engine_Clan_2" ],
    /*exclude mechs from crossassembly (if you dont want to add tags to them)*/
    "CrossAssemblyExcludedMechs": [ "mechdef_mad_cat_timber_wolf-PRYDE" ],
    /*set to a string to enable omni mode for them (on ready you can choose which variant you want to ready, provided you know the variant)*/
    "OmniMechTag": "chassis_omni",
    /*do fresh assembled mechs need to be readied before use? does not apply to selling/storing, if flatCost > 0 the techpoint cost (duration) for readying is flatCost + perComponentCost * numOfNonFixedComponents*/
    "AssembledMechsNeedReadying": true,
    "AssembledMechsReadyingFlatCost": -1,
    "AssembledMechsReadyingPerNonFixedComponentCost": 0,
    /*modified salvage, based on structure points left (high priority is CT, head is no priority, rest low)*/
    "StructurePointBasedSalvageActive": true,
    "StructurePointBasedSalvageLowPriorityFactor": 1,
    "StructurePointBasedSalvageHighPriorityFactor": 3.25,
    "StructurePointBasedSalvageMaxPartsFromMech": 3,
    "StructurePointBasedSalvageMinPartsFromMech": 1,
    "StructurePointBasedSalvageSalvageBlacklist": [ "Gear_General_Robinson_TG120_Drive_Train", "Gear_Cockpit_Tacticon_B2000_Battle_Computer" ],
    /*turret components can be salvaged with this probability, set to 0 to disable*/
    "StructurePointBasedSalvageTurretComponentSalvageChance": 0.25,
    /*redirect mech part salvage generation, without adding mech tags: "old": "new"*/
    "StructurePointBasedSalvageMechPartSalvageRedirect": {
      /*campagn*/
      "mechdef_kingcrab_KGC-V-0000": "mechdef_kingcrab_KGC-0000",

      /*flashpoints*/
      "mechdef_Catapult_fp_justinAllard": "mechdef_catapult_CPLT-C1",
      "mechdef_Centurion_fp_justinAllard": "mechdef_centurion_CN9-A",
      "mechdef_Dragon_fp_justinAllard": "mechdef_dragon_DRG-1N",
      "mechdef_Griffin_fp_justinAllard": "mechdef_griffin_GRF-1N",
      "mechdef_jagermech_JM6-S_fp_headhunting": "mechdef_jagermech_JM6-S",
      "mechdef_thunderbolt_TDR-5SE_fp_headhunting": "mechdef_thunderbolt_TDR-5SE",
      "mechdef_fp_morganKell_stalker_STK-3F": "mechdef_stalker_STK-3F",
      "mechdef_warhammer_WHM-BW": "mechdef_warhammer_WHM-6R",
      "mechdef_marauder_MAD-CM": "mechdef_marauder_MAD-3R",
      "mechdef_annihilator_ANH-JH": "mechdef_annihilator_ANH-1A",
      "mechdef_archer_ARC-LS": "mechdef_archer_ARC-2S",
      "mechdef_marauder_MAD-BH": "mechdef_marauder_MAD-3R",
      "mechdef_atlas_AS7-GG": "mechdef_atlas_AS7-D",
      "mechdef_archer_ARC-XO": "mechdef_archer_ARC-2R",
      "mechdef_rifleman_RFL-RIP": "mechdef_rifleman_RFL-3N"
    },
    /*enable automatic assembly popup after gaining mech parts*/
    "AutoQueryAssembly": true,
    /*colors used for mechbay storage, parts is always used first. usual html notation (name or hex code)*/
    "StorageColorParts": "#FF7F50",
    "StorageColorMech": "#7FFF00",
    "StorageColorOmni": "#7FFFD4",
    "StorageColorVehicle": "#00BFFF",
    "StorageColorVehiclePart": "#FF1493",
    /*use only the CC no_salvage flag for salvage calculation and ignore BLACKLISTED. everything is salvageable, if no CC is present*/
    "UseOnlyCCSalvageFlag": false,
    /*use only CC variants for assembly and salvage redircet (performance option, but disables all tag checks)*/
    "UseOnlyCCAssemblyOptions": false,
    /*set this to your CU fake vehicle chassis tag if CU is in your load order*/
    "FakeVehilceTag": "fake_vehicle_chassis",
    /*enable to salvage and assemble vehicles (requires CU)*/
    "SalvageAndAssembleVehicles": false,
    /*set to true if you want to show all possible variants in the assembly popup. useful for checking variant assembly*/
    "ShowAllVariantsInPopup": false,
    /*allows salvaging and assembly of mechs whose id does not match the chassisdef id (excluding mechdef_ and chassidef_).
    if this is false, SMA will try to convert parts you salvage to parts of the main variant.
    warning: if you store one of these, it will become one of the main variant.*/
    "AllowNonMainVariants": false,
    /*changes the combat hud vehicle name to vehicle.Description.UIName. requires CU.*/
    "CUVehicle_CombatHudDisplayName": false
  }
}